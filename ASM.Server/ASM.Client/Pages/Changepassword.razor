@page "/changepassword/{id}"
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject IJSRuntime JSRuntime
@using System.Net.Http.Headers
@using Newtonsoft.Json
@using System.Security.Cryptography
@using System.IO
@using System.Text


<div class="w-50 m-auto">
    <h3 class="text-center">Đổi mật khẩu</h3>
    <input type="hidden" value="@khachhang.KhachhangID" />
    <div class="input-group flex-nowrap mt-3">
        <span class="input-group-text" id="addon-wrapping"><i class="fas fa-user"></i></span>
        <input type="text" class="form-control" placeholder="E-mail"
               aria-describedby="addon-wrapping" readonly @bind="@email" />
    </div>
    <div class="input-group flex-nowrap mt-3">
        <span class="input-group-text" id="addon-wrapping"><i class="fas fa-user"></i></span>
        <input @ref="mkcu" type="password" class="form-control" placeholder="Mật khẩu cũ"
               aria-describedby="addon-wrapping" @bind="@oldpwd" />
    </div>
    <div class="input-group flex-nowrap mt-3">
        <span class="input-group-text" id="addon-wrapping"><i class="fas fa-user"></i></span>
        <input type="password" class="form-control" placeholder="Mật khẩu mới"
               aria-describedby="addon-wrapping" @bind="@newpwd" />
    </div>
    <div class="input-group flex-nowrap mt-3">
        <span class="input-group-text" id="addon-wrapping"><i class="fas fa-user"></i></span>
        <input @ref="confirm" type="password" class="form-control" placeholder="Nhập lại mật khẩu"
               aria-describedby="addon-wrapping" @bind="@confirmpwd" />
        <div class="alert-danger mt-2">@loi</div>
    </div>
    <div class="mt-3">
        <button type="submit" class="btn btn-primary" @onclick="CheckPass">Xác nhận</button>
    </div>
</div>
@code {
    [Parameter]
    public string id { get; set; }
    private string oldpwd { get; set; }
    private string newpwd { get; set; }
    private string confirmpwd { get; set; }
    private string email { get; set; }
    ElementReference confirm;
    ElementReference mkcu;
    string loi;
    Khachhang khachhang = new Khachhang();
    string apiUrl;

    protected override async Task OnInitializedAsync()
    {
        email = sessionStorage.GetItem<string>("Email");
        apiUrl = config.GetSection("API")["APIUrl"].ToString();
        var accessToken = sessionStorage.GetItem<string>("AccessToken");
        using (HttpClient client = new HttpClient())
        {
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var strJson = await client.GetStringAsync(apiUrl + "khachhang/" + id);
            khachhang = JsonConvert.DeserializeObject<Khachhang>(strJson);
        }
    }
    private async Task CheckPass()
    {
        string encryptpwd = await JSRuntime.InvokeAsync<string>(identifier: "mahoapwd", oldpwd);
        encryptpwd = encryptpwd.ToUpper();
        string enconfirmpwd = encryptpwd;
        Console.WriteLine(encryptpwd);
        if (confirmpwd != newpwd)
        {
            loi = "Mật khẩu mới không trùng khớp!";
            confirmpwd = "";
            await confirm.FocusAsync();
        }
        else
        {
            if (encryptpwd != khachhang.Password && enconfirmpwd != khachhang.ConfirmPassword)
            {
                loi = "Mật khẩu cũ không trùng khớp";
                oldpwd = "";
                await mkcu.FocusAsync();
            }
            else
            {
                khachhang.Password = newpwd;
                khachhang.ConfirmPassword = confirmpwd;
                await Doipass();
                NavigationManager.NavigateTo("/");
            }
        }
    }

    private async Task Doipass()
    {
        using (HttpClient client = new HttpClient())
        {
            khachhang.Mota = "";
            var apiUrl = config.GetSection("API")["APIUrl"].ToString();
            var accessToken = sessionStorage.GetItem<string>("AccessToken");
            StringContent content = new StringContent(JsonConvert.SerializeObject(khachhang), System.Text.Encoding.UTF8, "application/json");
            client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            HttpResponseMessage response = await client.PutAsync(apiUrl + $"khachhang/{khachhang.KhachhangID}", content);
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                Console.WriteLine("Lỗi khi gọi API");
            }
            else
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (apiResponse == "-1")
                {
                    Console.WriteLine("Thất bại");
                }
                else
                {
                    Console.WriteLine("Thành công");
                }
            }
        }
    }
}
